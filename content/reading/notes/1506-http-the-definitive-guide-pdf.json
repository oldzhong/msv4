{"date": "2015-06-07", "source": "3e2621c1-9a3e-4667-acfc-72d650978beb.html", "notes": [{"content": "Figure 4-4. IP packets carry TCP segments, which carry chunks of the TCP data stream", "comment": "\u8fd9\u5f20\u56fe\u5f88\u597d\uff01", "time": "2015-06-07 17:55:31"}, {"content": "For this reason, HTTP/1.1 (and enhanced versions of HTTP/1.0) allows HTTPdevices to keep TCP connections open after transactions complete and to reuse thepreexisting connections for future HTTP requests", "time": "2015-06-07 18:05:25"}, {"content": "The Keep-Alive header is completely optional but is permitted only when Connec-tion: Keep-Alive also is present. Here\u2019s an example of a Keep-Alive response headerindicating that the server intends to keep the connection open for at most five moretransactions, or until it has sat idle for two minutes:Connection: Keep-AliveKeep-Alive: max=5, timeout=120", "time": "2015-06-07 18:08:21"}, {"content": "HTTP/1.1 permits optional request pipelining over persistent connections. This is afurther performance optimization over keep-alive connections. Multiple requests canbe enqueued before the responses arrive. While the first request is streaming acrossthe network to a server on the other side of the globe, the second and third requestscan get underway. This can improve performance in high-latency network condi-tions, by reducing network round trips", "comment": "http\u534f\u8bae\u5728\u5e94\u7528\u5c42\u7684\u4f18\u5316\uff0c\u770bchrome\u7684\u8c03\u8bd5\u9875\u9762\u5c31\u80fd\u770b\u51fa\u6765", "time": "2015-06-07 18:11:18"}, {"content": "HTTP clients should not pipeline requests that have side effects (such asPOSTs). In general, on error, pipelining prevents clients from knowing which ofa series of pipelined requests were executed by the server. Because nonidempo-tent requests such as POSTs cannot safely be retried, you run the risk of somemethods never being executed in error conditions", "time": "2015-06-07 18:24:21"}, {"content": "Connection Close Tolerance, Retries, and IdempotencyConnections can close at any time, even in non-error conditions. HTTP applica-tions have to be ready to properly handle unexpected closes. If a transport connec-tion closes while the client is performing a transaction, the client should reopen the", "time": "2015-06-07 18:28:21"}, {"content": "connection and retry one time, unless the transaction has side effects.", "time": "2015-06-07 18:28:40"}], "duokanbookid": "lbdc1c11g91g8e80f4b47e0b31f5gbdc", "title": "HTTP: The Definitive Guide"}