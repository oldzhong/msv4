{"date": "2013-09-30", "source": "c2db1a1b-a9ef-4225-b645-a555499ce080.html", "notes": [{"content": "PHP\u2019s Data TypesPHP supports the following basic data types:\nn\nInteger\u2014Used for whole numbers\nn\nFloat (also called double)\u2014Used for real numbers\nn\nString\u2014Used for strings of characters\nn\nBoolean\u2014Used for true or false values\nn\nArray\u2014Used to store multiple data items (see Chapter 3,\u201cUsing Arrays\u201d)\nn\nObject\u2014Used for storing instances of classes (see Chapter 6)", "time": "2013-09-30 23:06:50"}, {"content": "The arrays $_GET and $_POST and some other special variables have their own scoperules.They are known as superglobals or autoglobals and can be seen everywhere, bothinside and outside functions.The complete list of superglobals is as follows:\nn\n$GLOBALS\n\u2014An array of all global variables (Like the global keyword, this allowsyou to access global variables inside a function\u2014for example, as$GLOBALS[\u2018myvariable\u2019]\n.)\nn\n$_SERVER\n\u2014An array of server environment variables\nn\n$_GET\n\u2014An array of variables passed to the script via the GET method\nn\n$_POST\n\u2014An array of variables passed to the script via the POST method\nn\n$_COOKIE\n\u2014An array of cookie variables\nn\n$_FILES\n\u2014An array of variables related to file uploads\nn\n$_ENV\n\u2014An array of environment variables\nn\n$_REQUEST\n\u2014An array of all user input including the contents of input including$_GET\n, $_POST, and $_COOKIE (but not including $_FILES since PHP 4.3.0)\nn\n$_SESSION\n\u2014An array of session variables", "time": "2013-09-30 23:28:33"}, {"content": "Integral Data TypesType\nRange\nStorage\nDescription(Bytes)TINYINT[(\nM)]\n\u2013127..128\n1\nVery small integersor 0..255BIT\nSynonym for TINYINTBOOL\nSynonym for TINYINTSMALLINT[(M)]\n\u201332768..32767\n2\nSmall integersor 0..65535MEDIUMINT[(M)]\n\u20138388608..\n3\nMedium-sized integers8388607or 0..16777215INT[(M)]\n\u20132\n31..2\n31\u20131\n4\nRegular integersor 0..2\n32\u20131INTEGER[(M)]\nSynonym for INTBIGINT[(M)]\n\u20132\n63..2\n63\u20131\n8\nBig integersor 0..2\n64\u20131", "time": "2013-10-01 00:13:27"}, {"content": "Date and Time Data TypesType\nRange\nDescriptionDATE\n1000-01-01\nA date.Will be displayed as YYYY-MM-DD.9999-12-31TIME\n-838:59:59\nA time.Will be displayed as HH:MM:SS. Note 838:59:59\nthat the range is much wider than you willprobably ever want to use.DATETIME\n1000-01-01\nA date and time. Will be displayed as 00:00:00\nYYYY-MM-DD HH:MM:SS\n.9999-12-3123:59:59", "time": "2013-10-01 00:13:43"}, {"content": "TIMESTAMP[(\nM)]\n1970-01-01\nA timestamp, useful for transaction reporting.00:00:00\nThe display format depends on the value of M(see Table 9.8, which follows).Sometime\nThe top of the range depends on the limit in 2037\non Unix.timestamps.YEAR[(\n2|4)]\n70\u201369\nA year.You can specify two- or four-digit (1970\u20132069)\nformat. Each has a different range, as shown.1901\u20132155", "time": "2013-10-01 00:13:57"}, {"content": "IS NULL\nn/a\naddress is null\nTests whether a field does notcontain a valueBETWEEN\nn/a\namount between\nTests whether a value is 0 and 60.00\ngreater than or equal to aminimum value and less thanor equal to a maximum valueIN\nn/a\ncity in (\u201cCarlton\u201d\n,\nTests whether a value is in a\u201cMoe\u201d)\nparticular setNOT IN\nn/a\ncity not in\nTests whether a value is not(\u201cCarlton\u201d\n, \u201dMoe\u201d)\nin a setLIKE\nPattern match\nname like (\u201cFred %\u201d)\nChecks whether a valuematches a pattern using sim-ple SQL pattern matchingNOT LIKE\nPattern match\nname not like\nChecks whether a value (\u201cFred %\u201d)\ndoesn\u2019t match a patternREGEXP\nRegular expression name regexp\nChecks whether a valuematches a regular expression", "time": "2013-10-01 00:15:55"}, {"content": "The PHP library for connecting to MySQL is called mysqli (the i stands for improved)", "time": "2013-10-11 01:13:55"}, {"content": "@ $db = new mysqli('localhost', 'bookorama', 'bookorama123', 'books');", "time": "2013-10-11 01:14:09"}, {"content": "In each iteration of this loop, you call $result-&gt;fetch_assoc() (ormysqli_fetch_assoc()\n).The loop does not execute if no rows are returned.This is afunction that takes each row from the resultset and returns the row as an array, with eachkey an attribute name and each value the corresponding value in the array:$row = $result-&gt;fetch_assoc();", "time": "2013-10-11 01:41:53"}, {"content": "MyISAM\u2014This type is the default and what we have used so far in the book. Itis based on the traditional ISAM type, which stands for Indexed Sequential AccessMethod, a standard method for storing records and files.", "time": "2013-10-01 00:34:17"}], "duokanbookid": "m1d2c563f609f5g9gf531g14de474979", "title": "PHP and MySQL Web Development 4th Edition"}