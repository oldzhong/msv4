{"date": "2016-07-16", "source": "ab5eb4d2-138e-45f6-81e2-d45506efc89a.html", "notes": [{"content": "One of the great successes of the web as a platformis the (mostly) seamless cooperation of such technologies, enabled bya shared representation of the page called the document object model(DOM). The DOM exposes the hierarchical structure of page content,such as paragraph and table elements, allowing reference and manip-ulation.", "time": "2016-07-16 18:20:45"}, {"content": "3 D\nESIGND3\u2019satomicoperandistheselection: a\ufb01lteredsetofelementsqueriedfrom the current document. Operators act on selections, modifyingcontent. Data joins bind input data to elements, enabling functionaloperators that depend on data, and producing enter and exit subselec-tions for the creation and destruction of elements in correspondencewith data. While operators apply instantaneously by default, animatedtransitions interpolate attributes and styles smoothly over time. Spe-cial operators called event handlers respond to user input and enableinteraction. Numerous helper modules, such as layouts and scales,simplify common visualization tasks.", "comment": "D3\u6838\u5fc3\u6982\u5ff5", "time": "2016-07-16 20:42:20"}, {"content": "Any number of operators can be applied to selected elements.These operators wrap the W3C DOM API, setting attributes (attr),styles (style), properties (property), HTML (html) and text(text) content. Operator values are speci\ufb01ed either as constants orfunctions; the latter are evaluated for each element. While the built-inoperators satisfy most needs, the each operator invokes an arbitraryJavaScript callback for total generality. Since each selection is simplyan array, elements can also be accessed directly (e.g., [0]).", "comment": "operator value\u53ef\u4ee5\u4e3a\u5e38\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u51fd\u6570", "time": "2016-07-16 20:46:41"}, {"content": "D3 supports method chaining for brevity when applying multipleoperators: the operator return value is the selection. (For example, thepiechartinFigure7isasinglestatement.) Theappendandinsertoperators add a new element for each element in the current selection,returning the added nodes, thus allowing the convenient creation ofnested structures. The remove operator discards selected elements.", "comment": "\u7c7b\u4f3cjquery\u7684\u94fe\u5f0f\u65b9\u6cd5\u8c03\u7528", "time": "2016-07-16 20:48:25"}, {"content": "Subselecting via selectAll groups elements by ancestor. Thus,d3.selectAll(\"p\").selectAll(\"b\") groups by paragraph,while d3.selectAll(\"p b\") returns a\ufb02at selection. Subselect-ing via select is similar, but preserves groups and propagates data.Grouping plays an important role in the data join (see x3.2), and func-tional operators may depend on the numeric index of the current ele-ment within its group (as in the x scale of Figure 5).", "comment": "\u4e24\u4e2a\u94fe\u5f0fselectAll\u8c03\u7528\u8fd4\u56de\u7684\u662fgrouping\u540e\u7684\u7ed3\u679c", "time": "2016-07-16 20:51:00"}, {"content": "If data or elements are leftover after computing the data join, theseare available in the enter and exit subselections, respectively. The en-tering data have no corresponding nodes; the exiting nodes have nocorresponding data. For example, if data is joined to the empty selec-tion, the enter operator returns placeholder nodes for each incomingdatum; these nodes can then be instantiated via append or insert.Similarly, if new data is joined to an existing selection, the exit op-erator returns elements bound to outgoing data to allow removal.", "time": "2016-07-18 10:39:47"}, {"content": "The delineation of enter, update and exit allows precise control ofthe element lifecycle. Properties that are constant for the life of the el-ement are set once on enter, while dynamic properties are recomputed", "comment": "enter\uff0cupdate\uff0cexit\u53ef\u4ee5\u7cbe\u51c6\u5730\u63a7\u5236\u5143\u7d20\u7684\u751f\u547d\u5468\u671f", "time": "2016-07-18 10:44:32"}, {"content": "The document object model supports event listeners: callback func-tions that receive user input events targeted at speci\ufb01c elements. D3\u2019son operator exposes this functionality for native event types. For con-sistency with other functional operators, the callback receives the dataand index as arguments (d, i), allowing data-driven interaction. Thetargeted node is this, and the current event is d3.event.", "comment": "\u4e8b\u4ef6\u76d1\u542c\uff0c\u4ee5\u53ca\u51e0\u4e2a\u91cd\u8981\u53c2\u6570", "time": "2016-07-18 10:46:56"}], "duokanbookid": "pbe4119b391fc7d7dfg22edfg5c026eg", "title": "D3: Data-Driven Documents"}