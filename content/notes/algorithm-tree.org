#+TITLE: 算法
#+DATE: 2014-02-27
#+KEYWORDS: 算法

* 红黑树
+ [[http://en.wikipedia.org/wiki/Red-black_tree][Red-Black Tree(wiki)]]
+ [[http://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91][红黑树（维基）]]

** 性质
摘自 Wiki：
1. 节点是红色或是黑色
2. 根是黑色
3. 所有的叶子都是黑色（叶子是 NIL 节点）
4. 每个红色节点的两个子节点都是黑色（即从每个叶子到根的所有路径上不能有两个连续的红色节点）
5. 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点

上述约束强制了红黑树的关键特性： *从根到叶子的最长可能路径不多于最短的可能路径的
两倍长* 。

[[../static/imgs/algorithm-tree/1.png]]

红黑树是 *二叉查找树* ，更具体地说，是一种 *自平衡二叉查找树* 。二叉查找树树有下面性质：
1. 若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值
2. 若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值
3. 任一节点的左、右子树也分别未二叉查找树
4. 没有键值相等的节点（no duplicate nodes）

** 红黑树的查找
红黑树的查找模式和哈希表是一样的，都是通过一个 Key 来查找一个 Value。

** 红黑树与哈希表的比较
红黑树效率稳定，拥有良好的最坏情况运行时间，占用内存低，但是平均复杂度为
O(logn)STL 的 map 就用红黑树来实现。

哈希表平均效率高，平均复杂度达到 O(1)，但是会有极端情况出现。另外当健稀疏时，占用
内存多。

** Linux 内核中的红黑树
Linux 内核
[[http://blog.csdn.net/npy_lp/article/details/7420689][详解 Linux 内核红黑树算法的实现]]

* hehe
