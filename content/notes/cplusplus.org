#+TITLE: C++ 语言 
#+DATE: 2014-04-21
#+KEYWORDS: C++

* STL
** std::set
*** 自定义比较函数  Comparator
set 利用到仿函数来实现让用户自定义比较函数，指定自己判重策略。
 1. 当 Comparator 返回 true 时，代表元素不同，set 不会判重（这个属于一个认知坑）

* 模板 
** 为啥模板必须实现在头文件中？
编译器在 *实例化* 一个模板时，会根据模板参数来创建一个新类。编译器需要
能访问到模板的各个方法的实现，否则无法实例化一个模板。假如我们将模板的
实现放到了 cpp 文件中，编译器在编译使用该模板的 cpp 文件时，该模板的实现对
于编译器是看不见的，这样 *编译器是无法将该模板实例化的* 。

参考： [[http://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file][Why can templates only be implemented in the header file?]]

**   编程实践
*** RPC 请求的转发
最近写的一个 Server 要多实例部署，每个实例管理系统的一部分 Client。我希望
这些 Server 能够提供以 HTTP 的方式提供完全相同的服务，例如，用户通过 HTTP 来
向任何一个 Server 查询某个 Client 的状态，这个 Server 先判断这个 Client 是否是
自己管理，如果不是，则它要把请求转发给该 Client 所属的 Server。

这个系统的各个模块都是通过 Protobuf RPC 来做交互，系统对外也是通过
HTTP 包裹着 Protobuf RPC 来提供接口。所以，下面将 Server 提供的服务也称作
RPC 服务。

对于单个 RPC 服务，Server 很容易实现请求的转发，代码量也不大。但是，该 Server
提供很多 RPC 服务，如果针对每个服务都写一篇转发，会带来很多重复的代码。
我想通过 C++的模板来去掉这部分重复。

C++模板这项的技术的主要目的就是去重复，所以我们分析一下每个 RPC 请求的转发
过程以及相关的数据结构的相似点和不同点，看看该如何套用模板。

1. RPC 的 Request 和 Response 其实都是 Message。在 RPC 转发的过程中，是不需要
   考虑该数据的本身的。

...
...

最后，我败了，因为我发现每个 RPC 请求都会调用不同的函数，模板能够解决掉参数
类型不同带来的重复，但是对于函数调用的不同，模板看起来很无能为力。由于该函
数调用其实是调用本地对象的函数，无法在调用模板类的的 RPC 转发函数时讲函
数指针地址传进去。

最后，我决定不用模板，用 C++的指针类型强转来实现去重复。具体实现如下：

实现一个类，该类主要提供一个 *DeliverRequest* 的接口，该函数有一个参数
叫
*** TODO 重构完这个类后继续写。 






