#+TITLE: LevelDB
#+DATE: 2016-07-02

LevelDB库提供了持久化的Key-Value存储，Keys和Value可以为任意的比特数组。Keys
是经过排序的，根据用户传进去的比较函数。


* 资料收集
- [[https://github.com/google/leveldb]]
- [[https://rawgit.com/google/leveldb/master/doc/index.html][LevelDB library documentation]]
- [[https://rawgit.com/google/leveldb/master/doc/impl.html][LevelDB implementation notes]]

* 重要概念
|                     |                                                                        |   |
|---------------------+------------------------------------------------------------------------+---|
| DB                  |                                                                        |   |
| Slice               | 用来存储Key和Value的简单存储结构，维护着一个指向外部存储的指针以及长度 |   |
| Snapshot            |                                                                        |   |
| Skip List（跳跃表） | 一种数据结构，以增大步进的方式加速有序链表的查询                       |   |

* 阅读代码
** 数据写入
1. 先写入log，再写入Memory Table。如果write options里面的sync设置为true，写
   完log后会立刻执行sync。

#+BEGIN_SRC cpp
Status DBImpl::Write(const WriteOptions& options, WriteBatch* my_batch) {
  Writer w(&mutex_);
  w.batch = my_batch;
  w.sync = options.sync;
  w.done = false;

  MutexLock l(&mutex_);
  writers_.push_back(&w);
  while (!w.done && &w != writers_.front()) {
    w.cv.Wait();
  }
  if (w.done) {
    return w.status;
  }

  // May temporarily unlock and wait.
  Status status = MakeRoomForWrite(my_batch == NULL);
  uint64_t last_sequence = versions_->LastSequence();
  Writer* last_writer = &w;
  if (status.ok() && my_batch != NULL) {  // NULL batch is for compactions
    WriteBatch* updates = BuildBatchGroup(&last_writer);
    WriteBatchInternal::SetSequence(updates, last_sequence + 1);
    last_sequence += WriteBatchInternal::Count(updates);

    // Add to log and apply to memtable.  We can release the lock
    // during this phase since &w is currently responsible for logging
    // and protects against concurrent loggers and concurrent writes
    // into mem_.
    {
      mutex_.Unlock();
      status = log_->AddRecord(WriteBatchInternal::Contents(updates));
      bool sync_error = false;
      if (status.ok() && options.sync) {
        status = logfile_->Sync();
        if (!status.ok()) {
          sync_error = true;
        }
      }
      if (status.ok()) {
        status = WriteBatchInternal::InsertInto(updates, mem_);
      }
      mutex_.Lock();
      if (sync_error) {
        // The state of the log file is indeterminate: the log record we
        // just added may or may not show up when the DB is re-opened.
        // So we force the DB into a mode where all future writes fail.
        RecordBackgroundError(status);
      }
    }
    if (updates == tmp_batch_) tmp_batch_->Clear();

    versions_->SetLastSequence(last_sequence);
  }

  while (true) {
    Writer* ready = writers_.front();
    writers_.pop_front();
    if (ready != &w) {
      ready->status = status;
      ready->done = true;
      ready->cv.Signal();
    }
    if (ready == last_writer) break;
  }

  // Notify new head of write queue
  if (!writers_.empty()) {
    writers_.front()->cv.Signal();
  }

  return status;
}
#+END_SRC

** 数据读取
1. 会按照MemTable -> Immutable Memtable -> SSTable_0~N的优先级来寻找，如果找到
   则返回，不会在下一层存储里面找了。
2. 在SSTable中逐层寻找的过程发生在Version::Get()函数里面。Level 0的SSTable
   存在一个Key位于多个文件中的情况，所以需要搜索所有文件，而其他level的
   SSTable是直接通过二分定位到Key位于的文件，然后只在这个文件里寻找。

#+BEGIN_SRC cpp
Status DBImpl::Get(const ReadOptions& options,
                   const Slice& key,
                   std::string* value) {
  Status s;
  MutexLock l(&mutex_);
  SequenceNumber snapshot;
  if (options.snapshot != NULL) {
    snapshot = reinterpret_cast<const SnapshotImpl*>(options.snapshot)->number_;
  } else {
    snapshot = versions_->LastSequence();
  }

  MemTable* mem = mem_;
  MemTable* imm = imm_;
  Version* current = versions_->current();
  mem->Ref();
  if (imm != NULL) imm->Ref();
  current->Ref();

  bool have_stat_update = false;
  Version::GetStats stats;

  // Unlock while reading from files and memtables
  {
    mutex_.Unlock();
    // First look in the memtable, then in the immutable memtable (if any).
    LookupKey lkey(key, snapshot);
    if (mem->Get(lkey, value, &s)) {
      // Done
    } else if (imm != NULL && imm->Get(lkey, value, &s)) {
      // Done
    } else {
      s = current->Get(options, lkey, value, &stats);
      have_stat_update = true;
    }
    mutex_.Lock();
  }

  if (have_stat_update && current->UpdateStats(stats)) {
    MaybeScheduleCompaction();
  }
  mem->Unref();
  if (imm != NULL) imm->Unref();
  current->Unref();
  return s;
}
#+END_SRC
** SequentialFile
